import streamlit as st
import database as db
import yaml
import pickle
from langchain.vectorstores import pinecone, Pinecone
import pinecone

import os
from dotenv import load_dotenv
from langchain import OpenAI
from langchain.embeddings import OpenAIEmbeddings
from langchain.chains.question_answering import load_qa_chain

from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

import streamlit_authenticator as stauth

# load environmental variables
load_dotenv(".env")
APIKEY = os.getenv("OPENAI_KEY")
PINE_KEY = os.getenv("PINECONE_KEY")
PINE_ENV = os.getenv("PINECONE_ENV")

# Functions
def save_dict_to_file(data, filename="data.pkl"):
    with open(filename, 'wb') as file:
        pickle.dump(data, file)

def load_dict_from_file(filename="data.pkl"):
    try:
        with open(filename, 'rb') as file:
            return pickle.load(file)
    except FileNotFoundError:
        return {}

def clear_file(filename="data.pkl"):
    with open('your_pickle_file.pkl', 'wb') as file:
        pass

if len(db.fetch_all_users()) == 0:
    clear_file()
    user_dict = {}
else:
    user_dict = load_dict_from_file()

# LLM Set up
llm = OpenAI(temperature=0, openai_api_key=APIKEY)

# 75 exercises generated by ChatGPT
ex_75_doc = open('exercises_75.txt','r')
ex_75 = ex_75_doc.read()

# Session state variables
if 'dump' not in st.session_state: # session state to allow dumping of items in yaml file and later operations after forms are submitted
    st.session_state['dump'] = None

if 'submitted0' not in st.session_state: # session state for first form submission
    st.session_state['submitted0'] = None

# DATA CONNECTION ----------------------------------
pinecone.init(
    api_key=PINE_KEY,
    environment=PINE_ENV)
index_n = "post-stab-info"
index = pinecone.Index(index_name=index_n)
qa = load_qa_chain(llm, chain_type="stuff")
embeddings = OpenAIEmbeddings(openai_api_key=APIKEY)
vectorstore = Pinecone.from_existing_index(index_name=index_n, embedding=embeddings)

# Setting up format for yaml file
cookie_int = {'expiry_days': 30,
  'key': 'cookie_key', # Must be string
  'name': 'cookie_name'}

# Website architecture
col1, col2 = st.columns([3, 1])

# Second Column
with col2:
    st.markdown("***Notes***")
    st.write('''Injury rating: rate on 1-10 scale based on this pain chart''')
    st.image('pain_scale.jpeg')
with st.expander('Sources'):
    st.write('https://specialistshospitalshreveport.com/patient-resources/using-the-pain-scale/')

with col1:
    with st.form('form0', clear_on_submit=False):
        st.header("Setting up your account")
        name = st.text_input('Name')

        username = st.text_input('Username')
        
        password = st.text_input('Password')
        hashed_password = stauth.Hasher([password]).generate()
        hashed_password = hashed_password[0]


        email = st.text_input('Email')

        past_injuries = st.text_input('''List any of your past/current injuries with a comma and space between injuries
                                        \nex: Plantar Fasciitis, Ankle Sprain''')
        injuries = past_injuries.split(', ')

        ex_per_day = st.selectbox('Choose the number of exercises you can do per day',('1','2','3','4','5','6','7','8','9'))

        st.write("Biometric Factors")

        gender = st.radio('Gender',('Female','Male'))
        age = st.text_input('Age')
        height = st.text_input('Height (cm)')
        body_fat = st.text_input('Body Fat Percentage')
        q_angle = st.text_input('Quadricep angle')

        # Creating the biometric fact dictionary to be used in Chain 1 later
        biom_fact_dict = {'age': age,
                    'height': height,
                    'body_fat_percentage': body_fat,
                    'quadricep_angle': q_angle}  # the biom_factors
        
        # Creating dicts to be inserted into yaml file which contains login information that st.auth needs to use
        other_dict = {'email': email, 'name': name, 'password': hashed_password}
        user_dict[username] = other_dict
        save_dict_to_file(user_dict)
        credentials = {'usernames': user_dict}
        
        submitted0 = st.form_submit_button('Submit')
        if submitted0:
            st.session_state['submitted0'] = True



# Inserting user inputs into user database in Deta Space after user fills out injury rating form
    if st.session_state['submitted0']:
        if len(injuries)>0:
            with st.form('form1'):
                n = len(injuries)
                if 'ratings' not in st.session_state:
                    st.session_state['ratings'] = 0
                st.header('Initial Ratings for your injuries')
                st.session_state['ratings'] = st.text_input("Rate your pain levels for your injuries: " + past_injuries + '. Use the format Rating 1, Rating 2, etc.')
                submitted1 = st.form_submit_button("Submit")
            if submitted1:
                col1.success('Submitted Successfully')
                str_ratings = st.session_state['ratings']
                ratings = str_ratings.split(', ')
                ex_list = ''
                db.insert_user(username, name, hashed_password, email, gender, ex_per_day, str(biom_fact_dict), past_injuries, str_ratings, ex_list, st.session_state['PSscore'])
                st.session_state['dump'] = True
        else:
            col1.success('Submitted Successfully')
            injuries = ''
            ratings = ''
            ex_list = ''
            db.insert_user(username, name, hashed_password, email, gender, ex_per_day, str(biom_fact_dict), injuries, ratings, ex_list, st.session_state['PSscore'])
            st.session_state['dump'] = True

    ## Login info is dumped into the yaml file (accessed in user login later)
        if st.session_state['dump']:
            items = {'credentials': credentials, 'cookie': cookie_int}
            with open("output.yaml", "w") as outfile:
                yaml.dump(items, outfile)

        ## CHAIN 1: Using information from the internet about classifying each biometric factor
            template1 = '''Based on the means and standard deviations for the gender group of the individual: {gender} and their biometric factors: age, height, body fat percentage, and Q angle,\
                classify the individual as:
                
                age: young (0-12), average (12-40), old (40-60), very old (60+);
                height: shorter than average, normal range, taller than average; 
                body fat percentage: obese or non-obese;
                Q angle: smaller than average, normal range, or larger than average;

                Here is the individual's information:
                biometric data: {biom_data}
                '''
            
            Biom_classification = PromptTemplate(
                input_variables = ['gender','biom_data'],
                template = template1)
            biom_class_chain = LLMChain(llm = llm, prompt = Biom_classification, verbose = True)
            biom_class = biom_class_chain.run(gender = gender, biom_data = str(biom_fact_dict))
            # print("biom_class: ", biom_class)

        ## CHAIN 2: ask for advice based on biometric factors
            prompt1 = "Starting from a list of 75 postural stability exercises, which exercises should I remove from this list based on the patient's biometric classification and\
                and information about how their biometric factors impact their adjustment to postural stability exercises.\
                    Their biometric classification: " + biom_class
            docs = vectorstore.similarity_search(prompt1)
            feedback1 = qa.run(input_documents=docs, question=prompt1)
            # print("feedback about which exercises to remove based on biometric factors: ", feedback1)

        ## CHAIN 3: narrow down list based on advice on biometric factors
            prompt2 = "Starting from this list of postural stability exercises: " + ex_75 + ", remove exercises from this list based on this feedback: {feedback}. Return the list of the remaining exercises."
            
            Narrow1 = PromptTemplate(
                input_variables = ['feedback'],
                template = prompt2)
            narrow1_chain = LLMChain(llm=llm, prompt=Narrow1, verbose=True)
            narrow1 = narrow1_chain.run(feedback = feedback1)
            # print("narrowed for biometric factors: ", narrow1)
            
            ex_list= narrow1
            db.update_user(username,{"ex_list": ex_list})
            st.write("Program done running, move onto the next page!")

